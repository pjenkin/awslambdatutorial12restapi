# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: sls-notes-backend
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-offline

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    # The below headers are for use in later lectures' Cognito access control
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    # The below headers are the custom headers as defined in util.js
    - app_user_id
    - app_user_name


provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-2
  stage: prod   # instead of DTAP, to save time, just use 1 stage: prod
  memorySize: 128
  timeout: 5
  endpointType: regional
  environment:
    NOTES_TABLE: ${self:service}-${opt:stage, self:provider.stage}  # environment variable for table name, this will set up in provider
    # the computed table name (in the environment variable) would be servicename-stagename e.g. sls-snotes-backend-prod
    # also used in the Lambda Functions for add-note.js &c
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt: region, self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}"
      # region code either from command line (opt) or from the provider properties; table name from the environment variable defined above

# 12-206 Defining Lambda Functions & API endpoints 
functions:
  add-note:
    handler: api/add-note.handler   # filename.handler
    description: POST /note
    events:
      - http:
          path: note                # NB double indenting
          method: post
          cors: 
            origin: '*'
            headers:  ${self:custom.allowedHeaders}   # use custom property defined above to whitelist
        # NB custom headers are used (with user_id and user_name - cf util.js) - these Requests must be allowed through API Gateway
        
  update-note: 
    handler: api/update-note.handler   # filename.handler
    description: PATCH /note            # why no note_id here? cf update-note.js
    events:
      - http:
          path: note                # NB double indenting
          method: patch
          cors: 
            origin: '*'
            headers:  ${self:custom.allowedHeaders}   # use custom property defined above to whitelist

  get-notes:
    handler: api/get-notes.handler   # filename.handler
    description: GET /notes
    events:
      - http:
          path: notes                # NB double indenting
          method: get
          cors: 
            origin: '*'
            headers:  ${self:custom.allowedHeaders}   # use custom property defined above to whitelist

  get-note:
    handler: api/get-note.handler   # filename.handler
    description: GET /note/n/{note_id}
    events:
      - http:
          path: note/n/{note_id}     # NB double indenting
          method: get
          cors: 
            origin: '*'
            headers:  ${self:custom.allowedHeaders}   # use custom property defined above to whitelist

  delete-note:
    handler: api/delete-note.handler   # filename.handler
    description: DELETE /note
    events:
      - http:
          path: note/t/{timestamp}     # NB double indenting
          method: delete
          cors: 
            origin: '*'
            headers:  ${self:custom.allowedHeaders}   # use custom property defined above to whitelist

resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain    # If Stack removed, do *not* delete but retain this table
      Properties:
        TableName: ${self:provider.environment.NOTES_TABLE}
        AttributeDefinitions: # fields, basically
          - AttributeName: user_id
            AttributeType: S  # S for String, N for Number
          - AttributeName: timestamp
            AttributeType: N
          - AttributeName: note_id
            AttributeType: S
        KeySchema:            # define primary/partition & secondary key index here
          - AttributeName: user_id
            KeyType: HASH     # HASH for a partition/primary key
          - AttributeName: timestamp 
            KeyType: RANGE    # RANGE for a sort key (index)
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes: #define GSI here
          - IndexName: note_id-index
            KeySchema: 
              - AttributeName: note_id
                KeyType: HASH   # HASH for a partition/primary key (no sort or range key)
            Projection:
              ProjectionType: ALL   # project/copy all attributes (cf best practices)
            ProvisionedThroughput:  # GSI will have its own ProvisionedThroughput
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
